image:
  repository: chainsafe/lodestar
  tag: latest

replicas: 1

podManagementPolicy: Parallel

mode: validator
podLabels:
  network: custom_devnet
  node_id: '3' 
  ethereum_role: validator
extraArgs:
  - --beaconNodes="http://beacon-000-headless.default.svc.cluster.local:5052, http://beacon-001-headless.default.svc.cluster.local:5052"
  - --beaconNodes="http://beacon-001-headless.default.svc.cluster.local:5052"
  - --paramsFile=/data/testnet_spec/config.yaml
  - --keystoresDir=/data/validator/keys
  - --secretsDir=/data/validator/secrets
  - --graffiti=$(hostname | cut -c -32)
  - --logLevel=trace
  - --metrics=true 
persistence:
  enabled: false 
serviceMonitor:
  enabled: false
livenessProbe: null
imagePullSecrets:
  - name: regcred
readinessProbe: null

initContainers:
# Important: Keep the init-keys container as the first element of the list
#            due to the usage of -set initContainers[0].env[0].value=...
- name: init-keys
  image: chaingremlin/eth-genesis:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - bash
    - -ace
    - >
      if [ -n "$(ls -A /data/validator/keys 2>/dev/null)" ];
      then
        echo "keys already exist. skipping...";
        exit 0;
      fi;
      INDEX=$(echo $(hostname)| rev | cut -d'-' -f 1 | rev);
      RANGE="NODE_${INDEX}_KEY_RANGE";
      S_MIN=$(echo ${!RANGE} | cut -d ':' -f1 );
      S_MAX=$(echo ${!RANGE} | cut -d ':' -f2 );
      mkdir -p /data/validator/keys /data/validator/secrets;
      echo "generating keys for node $INDEX. range $S_MIN to $S_MAX";
      eth2-val-tools keystores --source-mnemonic="$MNEMONIC" --source-min=$S_MIN --source-max=$S_MAX --prysm-pass Pass123word --insecure --out-loc assigned_data;
      mv assigned_data/keys/* /data/validator/keys/;
      mv assigned_data/secrets/* /data/validator/secrets/;
      chmod -R 0600 /data/validator/keys/*/voting-keystore.json /data/validator/secrets/*;
      echo "finished generating and importing keys";
  volumeMounts:
    - name: storage
      mountPath: "/data"
  env:
    # Important: Keep "MNEMONIC" as the first env var.
    #            due to the usage of -set initContainers[0].env[0].value=...
    - name: MNEMONIC
      value: "burger apology school pelican enhance roof differ universe flee humble fat join matrix oppose evidence thrive surprise flight"
    - name: NODE_0_KEY_RANGE
      value: "0:4000"

- name: init-genesis
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      mkdir -p /data/testnet_spec;
      if ! [ -f /data/testnet_spec/genesis.ssz ];
      then
        echo "waiting for genesis provider";
        while ! wget -T 5 -c http://eth-genesis.default.svc.cluster.local:8000/custom_config_data/; do sleep 10; done;
        wget -O /data/testnet_spec/deposit_contract.txt http://eth-genesis.default.svc.cluster.local:8000/custom_config_data/deposit_contract.txt;
        wget -O /data/testnet_spec/deploy_block.txt http://eth-genesis.default.svc.cluster.local:8000/custom_config_data/deploy_block.txt;
        wget -O /data/testnet_spec/config.yaml http://eth-genesis.default.svc.cluster.local:8000/custom_config_data/config.yaml;
        wget -O /data/testnet_spec/genesis.ssz http://eth-genesis.default.svc.cluster.local:8000/custom_config_data/genesis.ssz;
        echo "genesis init done";
      else
        echo "genesis exists. skipping...";
      fi;
      apk update && apk add jq;
          
  volumeMounts:
    - name: storage
      mountPath: "/data"
  
- name: init-beacon-wait
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      HEALTH_API="http://beacon-000-headless.default.svc.cluster.local:5052/eth/v1/node/identity";
      echo "waiting for beacon node to be available on $HEALTH_API";
      while ! wget $HEALTH_API; do sleep 10; done;
      echo "beacon node is available"
persistence:
  enabled: false
